/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:09:02 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import net.mooctest.InsertionResult;
import net.mooctest.InternalNode;
import net.mooctest.LeafNode;
import net.mooctest.Node;
import org.junit.runner.RunWith;

public class Node_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      leafNode1.keys = (List<Integer>) linkedList0;
      leafNode1.insert(1199, "+!'C");
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        leafNode1.insert(2, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      leafNode1.keys = (List<Integer>) linkedList0;
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      int int0 = leafNode1.order(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      leafNode1.keys = (List<Integer>) linkedList0;
      leafNode1.insert(1199, "+!'C");
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      int int0 = leafNode1.order(2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(104);
      int int0 = leafNode0.order(104);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      leafNode0.insert(2, "");
      InsertionResult<String> insertionResult0 = leafNode0.insert(2, "JWj9");
      assertNull(insertionResult0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1);
      Integer integer0 = new Integer(1927);
      leafNode0.insert((-619), integer0);
      int int0 = leafNode0.getNodeSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void testmy()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(3);
      leafNode0.insert(1, 100);
      leafNode0.insert(0,1);
      leafNode0.insert(2,3);
      leafNode0.insert(50,2);
      leafNode0.insert(30,30);
      leafNode0.order(2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1805);
      leafNode0.insert(1805, "");
      int int0 = leafNode0.findLessThanOrEqualToKey((-1054));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1927);
      Integer integer0 = new Integer((-993));
      leafNode0.insert(1, integer0);
      int int0 = leafNode0.findLessThanOrEqualToKey(1927);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1769);
      int int0 = leafNode0.findLessThanOrEqualToKey(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedList<Node<Integer>> linkedList1 = new LinkedList<Node<Integer>>();
      InternalNode<Integer> internalNode0 = new InternalNode<Integer>(1, linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        internalNode0.order(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.InternalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InternalNode<String> internalNode0 = new InternalNode<String>(345);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      internalNode0.keys = (List<Integer>) linkedList0;
      // Undeclared exception!
      try { 
        internalNode0.order(1996);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
          assertEquals("Index: -1, Size: 0",e.getMessage());

          //verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Node<Node<Object>>> linkedList1 = new LinkedList<Node<Node<Object>>>();
      InternalNode<Node<Object>> internalNode0 = new InternalNode<Node<Object>>(1, linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        internalNode0.order(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1917);
      LeafNode<Integer> leafNode1 = new LeafNode<Integer>(1917, leafNode0);
      leafNode1.keys = null;
      Integer integer0 = new Integer(2154);
      // Undeclared exception!
      try { 
        leafNode1.insert(1917, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      leafNode1.keys = (List<Integer>) linkedList0;
      Integer integer0 = Integer.getInteger("net.mooctest.InsertionResult", 2);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        leafNode1.insert(2, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
          assertEquals("Index: 0, Size: 0",e.getMessage());

          //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0, linkedList0, linkedList1);
      leafNode1.t = (-1);
      // Undeclared exception!
      try { 
        leafNode1.insert(2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
          assertEquals("Illegal Capacity: -2",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1927);
      int int0 = leafNode0.getNodeSize();
      assertEquals(0, int0);
  }
}
