/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:10:21 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import net.mooctest.InsertionResult;
import net.mooctest.LeafNode;
import org.junit.runner.RunWith;

public class LeafNode_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      leafNode0.insert(1602, "");
      leafNode0.insert(2, "");
      leafNode0.reverseToString();
      assertEquals(2, leafNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      leafNode0.t = (-2649);
      // Undeclared exception!
      try { 
        leafNode0.insert(3279, "1602,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2650
         //
          assertEquals("Illegal Capacity: -2650",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      leafNode0.insert(1602, "");
      leafNode0.insert(2, "");
      leafNode0.insert((-2710), "ccV_hGpSx:cnI7");
      assertEquals(3, leafNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      leafNode0.insert(1581, "");
      leafNode0.insert((-656), "");
      leafNode0.insert(1617, "");
      assertEquals(3, leafNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      InsertionResult<String> insertionResult0 = leafNode0.insert((-2710), "ccV_hGpSx:cnI7");
      assertEquals(Integer.MAX_VALUE, insertionResult0.getMinGap());
      
      int int0 = leafNode0.order((-2710));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      leafNode0.insert(1602, "");
      leafNode0.insert((-2710), "ccV_hGpSx:cnI7");
      int int0 = leafNode0.order(1602);
      assertEquals(2, leafNode0.getNodeSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      leafNode0.insert(1581, "");
      String string0 = leafNode0.getValue(1581);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(531);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(531, leafNode0, linkedList0, linkedList1);
      LeafNode<Object> leafNode2 = leafNode1.getPrev();
      assertSame(leafNode2, leafNode0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(531);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(531, leafNode0, linkedList0, linkedList1);
      Integer integer0 = new Integer(531);
      InsertionResult<Object> insertionResult0 = leafNode0.insert(3818, integer0);
      assertEquals(Integer.MAX_VALUE, insertionResult0.getMinGap());
      
      LeafNode<Object> leafNode2 = leafNode1.getPrev();
      assertEquals(1, leafNode2.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1417);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(1417, leafNode0, linkedList0, linkedList1);
      LeafNode<Object> leafNode2 = leafNode0.getNext();
      assertEquals(0, leafNode2.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1417);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      leafNode0.keys = (List<Integer>) linkedList0;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(1417, leafNode0, linkedList0, linkedList1);
      leafNode0.insert(Integer.MAX_VALUE, linkedList1);
      leafNode1.keys = (List<Integer>) linkedList0;
      assertEquals(1, leafNode1.getNodeSize());
      
      LeafNode<Object> leafNode2 = leafNode0.getNext();
      assertSame(leafNode2, leafNode1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1059);
      int int0 = leafNode0.calculateGap((-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(35);
      leafNode0.keys = null;
      // Undeclared exception!
      try { 
        leafNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1607);
      leafNode0.keys = null;
      // Undeclared exception!
      try { 
        leafNode0.reverseToString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1044);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LeafNode<String> leafNode1 = new LeafNode<String>(2, leafNode0, linkedList0, linkedList1);
      leafNode1.keys = null;
      // Undeclared exception!
      try { 
        leafNode1.insert(1, ".s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1);
      leafNode0.t = 0;
      // Undeclared exception!
      try { 
        leafNode0.insert((-3184), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
          assertEquals("Illegal Capacity: -1",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1227);
      leafNode0.keys = null;
      // Undeclared exception!
      try { 
        leafNode0.getValue((-380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(1607);
      leafNode0.keys = null;
      // Undeclared exception!
      try { 
        leafNode0.calculateGap(1607);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(164);
      // Undeclared exception!
      try { 
        leafNode0.calculateGap(136);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 135, Size: 0
         //
          assertEquals("Index: 135, Size: 0",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(3552);
      // Undeclared exception!
      try { 
        leafNode0.calculateGap(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LeafNode<String> leafNode1 = null;
      try {
        leafNode1 = new LeafNode<String>(1, leafNode0, (List<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LeafNode<String> leafNode2 = null;
      try {
        leafNode2 = new LeafNode<String>((-2179), leafNode1, leafNode0.keys, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2180
         //
          assertEquals("Illegal Capacity: -2180",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LeafNode<Object> leafNode0 = null;
      try {
        leafNode0 = new LeafNode<Object>(1, (LeafNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(699);
      LeafNode<Object> leafNode1 = null;
      try {
        leafNode1 = new LeafNode<Object>((-1), leafNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
          assertEquals("Illegal Capacity: -2",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LeafNode<Integer> leafNode0 = null;
      try {
        leafNode0 = new LeafNode<Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
          assertEquals("Illegal Capacity: -2",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(531);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(531, leafNode0, linkedList0, linkedList1);
      LeafNode<Object> leafNode2 = new LeafNode<Object>(531, leafNode0);
      assertEquals(0, leafNode2.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2);
      LeafNode<String> leafNode1 = new LeafNode<String>(137, leafNode0);
      assertEquals(0, leafNode1.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1602);
      int int0 = leafNode0.order(1602);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      InsertionResult<String> insertionResult0 = leafNode0.insert(1581, "");
      assertEquals(Integer.MAX_VALUE, insertionResult0.getMinGap());
      
      InsertionResult<String> insertionResult1 = leafNode0.insert((-656), "");
      assertEquals(2237, insertionResult1.getMinGap());
      
      String string0 = leafNode0.toString();
      assertEquals("-656,1581", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      // Undeclared exception!
      try { 
        leafNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      String string0 = leafNode0.reverseToString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(493);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LeafNode<Object> leafNode1 = new LeafNode<Object>(493, leafNode0, linkedList0, linkedList1);
      leafNode1.insert(493, linkedList0);
      // Undeclared exception!
      try { 
        leafNode1.insert((-1), linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      InsertionResult<String> insertionResult0 = leafNode0.insert(1581, "");
      assertEquals(Integer.MAX_VALUE, insertionResult0.getMinGap());
      
      InsertionResult<String> insertionResult1 = leafNode0.insert(1617, "");
      assertEquals(36, insertionResult1.getMinGap());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      leafNode0.insert((-2179), (Object) null);
      leafNode0.insert(Integer.MAX_VALUE, linkedList0);
      assertEquals(1, leafNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1581);
      leafNode0.insert(1581, "");
      leafNode0.insert(1581, "");
      assertEquals(1, leafNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1604);
      LeafNode<String> leafNode1 = new LeafNode<String>(1604);
      List<Integer> list0 = leafNode1.keys;
      leafNode1.insert(1604, "'S<vX");
      leafNode0.keys = list0;
      // Undeclared exception!
      try { 
        leafNode0.getValue(1604);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
          assertEquals("Index: 0, Size: 0",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1);
      Integer integer0 = new Integer(1887);
      leafNode0.insert(1, "");
      // Undeclared exception!
      try { 
        leafNode0.insert((int) integer0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
          assertEquals("Index: 0, Size: 0",e.getMessage());

          //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(2030);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LeafNode<String> leafNode1 = new LeafNode<String>(1296, leafNode0, linkedList0, linkedList1);
      leafNode1.keys = (List<Integer>) linkedList0;
      // Undeclared exception!
      try { 
        leafNode1.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
          assertEquals("Index: -1, Size: 0",e.getMessage());

          //verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(1);
      LeafNode<Object> leafNode1 = leafNode0.getNext();
      assertNull(leafNode1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LeafNode<Object> leafNode0 = new LeafNode<Object>(493);
      LeafNode<Object> leafNode1 = leafNode0.getPrev();
      assertNull(leafNode1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LeafNode<Integer> leafNode0 = new LeafNode<Integer>(372);
      Integer integer0 = leafNode0.getValue(2030);
      assertNull(integer0);
  }
}
