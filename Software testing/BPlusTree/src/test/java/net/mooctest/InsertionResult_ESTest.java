/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:10:31 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import net.mooctest.InsertionResult;
import net.mooctest.InternalNode;
import net.mooctest.LeafNode;
import net.mooctest.Node;
import org.junit.runner.RunWith;

public class InsertionResult_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, (Node<Object>) null, (Node<Object>) null);
      Integer integer1 = insertionResult0.getSplitRootKey();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(1130);
      InsertionResult<Object> insertionResult1 = new InsertionResult<Object>(integer0, (Node<Object>) null, (Node<Object>) null, insertionResult0);
      insertionResult1.getSplitRootKey();
      assertEquals(1130, insertionResult1.getMinGap());
      assertEquals(1130, insertionResult0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(1924);
      InsertionResult<Object> insertionResult1 = new InsertionResult<Object>(integer0, (Node<Object>) null, (Node<Object>) null, insertionResult0);
      insertionResult1.getSplitRootKey();
      assertEquals(1924, insertionResult0.getMinGap());
      assertEquals(1924, insertionResult1.getMinGap());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(8);
      LeafNode<Node<Object>> leafNode0 = new LeafNode<Node<Object>>(526);
      InsertionResult<Node<Object>> insertionResult0 = new InsertionResult<Node<Object>>(integer0, (Node<Node<Object>>) null, leafNode0);
      Node<Node<Object>> node0 = insertionResult0.getRightNode();
      assertEquals(0, node0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(1);
      int int0 = insertionResult0.getMinGap();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>((-940));
      int int0 = insertionResult0.getMinGap();
      assertEquals((-940), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LeafNode<Node<Node<Object>>> leafNode0 = new LeafNode<Node<Node<Object>>>(317);
      leafNode0.insert(0, (Node<Node<Object>>) null);
      InsertionResult<Node<Node<Object>>> insertionResult0 = new InsertionResult<Node<Node<Object>>>(integer0, leafNode0, leafNode0);
      Node<Node<Node<Object>>> node0 = insertionResult0.getLeftNode();
      assertEquals(1, node0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      InsertionResult<Integer> insertionResult0 = null;
      try {
        insertionResult0 = new InsertionResult<Integer>(integer0, (Node<Integer>) null, (Node<Integer>) null, (InsertionResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          assertNull(e.getMessage());
         //verifyException("net.mooctest.InsertionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, (Node<Object>) null, (Node<Object>) null);
      int int0 = insertionResult0.getMinGap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(46);
      insertionResult0.getRightNode();
      assertEquals(46, insertionResult0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(46);
      insertionResult0.getLeftNode();
      assertEquals(46, insertionResult0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InsertionResult<Integer> insertionResult0 = new InsertionResult<Integer>(46);
      Integer integer0 = insertionResult0.getSplitRootKey();
      InternalNode<Node<Object>> internalNode0 = new InternalNode<Node<Object>>(46);
      InsertionResult<Node<Object>> insertionResult1 = new InsertionResult<Node<Object>>(integer0, internalNode0, internalNode0);
      insertionResult1.getLeftNode();
      assertEquals(46, insertionResult0.getMinGap());
  }
}
