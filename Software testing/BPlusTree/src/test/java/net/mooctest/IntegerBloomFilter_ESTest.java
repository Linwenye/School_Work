/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:10:49 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import net.mooctest.IntegerBloomFilter;
import org.junit.runner.RunWith;

public class IntegerBloomFilter_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-534), (-995), 641);
      integerBloomFilter0.add((-534));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(139, 139, (-735));
      integerBloomFilter0.getExpectedFalsePositiveProbability();
      integerBloomFilter0.clear();
      int int0 = 2096;
      integerBloomFilter0.clear();
      // Undeclared exception!
      try { 
        integerBloomFilter0.add(2096);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          assertNull(e.getMessage());
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-3732), 0, (-3732));
      integerBloomFilter0.getTotalHashFunctions();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2540;
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(2540, 2540, 2540);
      int int1 = 1759;
      integerBloomFilter0.add(2540);
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1759);
      integerBloomFilter0.add(1759);
      integerBloomFilter0.clear();
      int int2 = 2726;
      integerBloomFilter0.getFalsePositiveProbability(0.0);
      integerBloomFilter0.getCurrentFalsePositiveProbability();
      integerBloomFilter0.getFilterSize();
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.getFilterSize();
      // Undeclared exception!
      integerBloomFilter0.add(2540);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-798), (-798), 1);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add(0);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add((-798));
      integerBloomFilter0.getFalsePositiveProbability(3648.974301840569);
      integerBloomFilter0.getFalsePositiveProbability((-862.5731034572));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 477;
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(477, 1592, 1592);
      int int1 = (-2327);
      integerBloomFilter0.add((-2327));
      integerBloomFilter0.add((-66));
      integerBloomFilter0.add(1);
      integerBloomFilter0.add((-370));
      integerBloomFilter0.add((-66));
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      // Undeclared exception!
      integerBloomFilter0.add((-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0, 0, 931);
      integerBloomFilter0.getTotalHashFunctions();
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      // Undeclared exception!
      try { 
        integerBloomFilter0.add(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //

      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-1), (-1), 1);
      integerBloomFilter0.getExpectedFalsePositiveProbability();
      integerBloomFilter0.clear();
      integerBloomFilter0.contains(1);
      integerBloomFilter0.add(1);
      integerBloomFilter0.clear();
      integerBloomFilter0.add((-3033));
      integerBloomFilter0.getCurrentFalsePositiveProbability();
      integerBloomFilter0.getFilterSize();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-402), (-402), (-402));
      // Undeclared exception!
      try { 
        integerBloomFilter0.contains((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = 835;
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0, 0, 835);
      int int2 = 1;
      // Undeclared exception!
      try { 
        integerBloomFilter0.add(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-1597), 0, 0);
      integerBloomFilter0.add((-255));
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add((-1));
      integerBloomFilter0.add(0);
      integerBloomFilter0.add(0);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add(0);
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.getFalsePositiveProbability((-1537.575878578));
      integerBloomFilter0.add(0);
      integerBloomFilter0.add(701);
      integerBloomFilter0.getFalsePositiveProbability(1.0);
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.getCurrentFalsePositiveProbability();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0.0, 0);
      integerBloomFilter0.getBitsPerElement();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(2989, 2989, 2989);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.getFilterSize();
      integerBloomFilter0.clear();
      integerBloomFilter0.contains(2207);
      integerBloomFilter0.add(2989);
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.getFilterSize();
      integerBloomFilter0.clear();
      integerBloomFilter0.getCurrentFalsePositiveProbability();
      integerBloomFilter0.add(8934121);
      // Undeclared exception!
      integerBloomFilter0.contains(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(33, 1735, 33);
      integerBloomFilter0.contains(1735);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0, 0, 0);
      integerBloomFilter0.getFalsePositiveProbability(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-1.0), 1355);
      integerBloomFilter0.add(701);
      integerBloomFilter0.clear();
      integerBloomFilter0.getTotalHashFunctions();
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.getTotalHashFunctions();
      integerBloomFilter0.add(0);
      integerBloomFilter0.getFilterSize();
      integerBloomFilter0.getExpectedFalsePositiveProbability();
      integerBloomFilter0.getExpectedFalsePositiveProbability();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-154);
      IntegerBloomFilter integerBloomFilter0 = null;
      try {
        integerBloomFilter0 = new IntegerBloomFilter((-154), 1, (-154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -154
         //
          assertEquals("nbits < 0: -154",e.getMessage());
         //verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0.0, 1);
      integerBloomFilter0.getExpectedFalsePositiveProbability();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1048;
      IntegerBloomFilter integerBloomFilter0 = null;
      try {
        integerBloomFilter0 = new IntegerBloomFilter(1133.65787, 1048);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -14672
         //
          assertEquals("nbits < 0: -14672",e.getMessage());
         //verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0, 0, 1);
      integerBloomFilter0.clear();
      // Undeclared exception!
      try { 
        integerBloomFilter0.contains(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
          assertEquals("/ by zero",e.getMessage());
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(100.0, 0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        integerBloomFilter0.add(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(1405, 1405, 1405);
      integerBloomFilter0.getCurrentFalsePositiveProbability();
      integerBloomFilter0.contains(1414);
      integerBloomFilter0.add((-919));
      integerBloomFilter0.add(1405);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(2047, 0, 2047);
      // Undeclared exception!
      try { 
        integerBloomFilter0.add((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(1063, 1063, 1063);
      integerBloomFilter0.add(701);
      integerBloomFilter0.add(1063);
      integerBloomFilter0.getBitsPerElement();
      integerBloomFilter0.add(701);
      integerBloomFilter0.add(701);
      boolean boolean0 = integerBloomFilter0.contains((-1));
      assertTrue(boolean0);
      
      int int0 = integerBloomFilter0.getFilterSize();
      assertEquals(1129969, int0);
      
      integerBloomFilter0.add(1063);
      assertEquals(1129969, integerBloomFilter0.getFilterSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-1.0), 1947);
      double double0 = integerBloomFilter0.getFalsePositiveProbability(1947);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, integerBloomFilter0.getBitsPerElement());
      assertEquals(0, integerBloomFilter0.getFilterSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter((-1290), 0);
      integerBloomFilter0.clear();
      double double0 = integerBloomFilter0.getCurrentFalsePositiveProbability();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, integerBloomFilter0.getBitsPerElement());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(0, 0, 0);
      integerBloomFilter0.clear();
      double double0 = integerBloomFilter0.getExpectedFalsePositiveProbability();
      assertEquals(1.0, double0, 0.01);
      
      integerBloomFilter0.clear();
      integerBloomFilter0.add(0);
      integerBloomFilter0.clear();
      integerBloomFilter0.add(0);
      integerBloomFilter0.add(0);
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1);
      integerBloomFilter0.getTotalHashFunctions();
      integerBloomFilter0.getCurrentFalsePositiveProbability();
      int int0 = integerBloomFilter0.getTotalHashFunctions();
      assertEquals(0, int0);
      
      integerBloomFilter0.clear();
      assertEquals(0, integerBloomFilter0.getBitsPerElement());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerBloomFilter integerBloomFilter0 = new IntegerBloomFilter(1.0, 1);
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1);
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.clear();
      integerBloomFilter0.add(1596);
      integerBloomFilter0.getExpectedFalsePositiveProbability();
      integerBloomFilter0.getExpectedFalsePositiveProbability();
      integerBloomFilter0.add(1596);
      integerBloomFilter0.clear();
      assertEquals(0, integerBloomFilter0.getFilterSize());
      assertEquals(0, integerBloomFilter0.getBitsPerElement());
      assertEquals(1.0, integerBloomFilter0.getCurrentFalsePositiveProbability(), 0.01);
  }
}
