/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:09:25 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import net.mooctest.BPlusTree;
import net.mooctest.InternalNode;
import net.mooctest.Node;
import org.junit.runner.RunWith;

public class BPlusTree_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1569, 1569);
      bPlusTree0.insert((-2443), "");
      bPlusTree0.insert((-2330), "Filter stopped the search.");
      bPlusTree0.insert(1569, "hf9H@XBcnHhR/\"hE]");
      assertEquals(113, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1, 1);
      bPlusTree0.insert((-3250), "");
      bPlusTree0.getSize();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2);
      bPlusTree0.insert(2, "G'87~>qx!Ntk%Sv)");
      bPlusTree0.insert(2560, (String) null);
      bPlusTree0.insert(1, "");
      // Undeclared exception!
      try { 
        bPlusTree0.search(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BPlusTree<Object> bPlusTree0 = new BPlusTree<Object>(701, 0);
      // Undeclared exception!
      try { 
        bPlusTree0.search(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
          assertEquals("/ by zero",e.getMessage());
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1, 1);
      bPlusTree0.insert(1, "t Hcwc8e=<:+C'|t");
      // Undeclared exception!
      try { 
        bPlusTree0.insert(1, "G:/Vt(`w2A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.InternalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 0);
      // Undeclared exception!
      try { 
        bPlusTree0.insert(Integer.MAX_VALUE, "");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
          assertEquals("/ by zero",e.getMessage());
         //verifyException("net.mooctest.IntegerBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1);
      // Undeclared exception!
      try { 
        bPlusTree0.inOrder();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BPlusTree<Node<Object>> bPlusTree0 = null;
      try {
        bPlusTree0 = new BPlusTree<Node<Object>>(442, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -29
         //
          assertEquals("nbits < 0: -29",e.getMessage());
         //verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BPlusTree<Integer> bPlusTree0 = null;
      try {
        bPlusTree0 = new BPlusTree<Integer>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
          assertEquals("Illegal Capacity: -2",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BPlusTree<InternalNode<Integer>> bPlusTree0 = null;
      try {
        bPlusTree0 = new BPlusTree<InternalNode<Integer>>((-1794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1795
         //
          assertEquals("Illegal Capacity: -1795",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 2);
      bPlusTree0.insert(2, "G'87~>qx!Ntk%Sv)");
      bPlusTree0.toString();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BPlusTree<Object> bPlusTree0 = new BPlusTree<Object>(1);
      bPlusTree0.toString();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1330);
      bPlusTree0.insert(1330, "");
      String string0 = bPlusTree0.inOrder();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
      assertEquals("1330", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 2);
      bPlusTree0.insert(2, "G'87~>qx!Ntk%Sv)");
      int int0 = bPlusTree0.order(2);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BPlusTree<Object> bPlusTree0 = new BPlusTree<Object>(1);
      int int0 = bPlusTree0.order(Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 2);
      bPlusTree0.insert(2, "G'87~>qx!Ntk%Sv)");
      bPlusTree0.insert(1, "");
      String string0 = bPlusTree0.reverseInOrder();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
      assertEquals("2,1,", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 2);
      bPlusTree0.reverseInOrder();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(1330);
      bPlusTree0.insert(1330, "");
      bPlusTree0.insert(1330, "1330");
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BPlusTree<InternalNode<String>> bPlusTree0 = new BPlusTree<InternalNode<String>>(1709, 1709);
      bPlusTree0.search(1709);
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 2);
      bPlusTree0.insert(2, "G'87~>qx!Ntk%Sv)");
      bPlusTree0.insert(1, "");
      bPlusTree0.search(1);
      assertEquals(2, bPlusTree0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BPlusTree<Integer> bPlusTree0 = new BPlusTree<Integer>(4601);
      bPlusTree0.getSize();
      assertEquals(Integer.MAX_VALUE, bPlusTree0.getMinGap());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BPlusTree<String> bPlusTree0 = new BPlusTree<String>(2, 0);
      int int0 = bPlusTree0.getMinGap();
      assertEquals(Integer.MAX_VALUE, int0);
  }
}
