/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 25 01:10:15 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import net.mooctest.InsertionResult;
import net.mooctest.InternalNode;
import net.mooctest.LeafNode;
import net.mooctest.Node;
import org.junit.runner.RunWith;

public class InternalNode_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      InsertionResult<Object> insertionResult0 = leafNode0.insert(10, "rw_Ay0]%|");
      leafNode0.insert(1508, leafNode0);
      InsertionResult<Object> insertionResult1 = new InsertionResult<Object>(integer0, leafNode0, leafNode0, insertionResult0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult1);
      int int0 = internalNode0.order(1508);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(2);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(2, insertionResult0);
      int int0 = internalNode0.order(2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedList<Node<InternalNode<Object>>> linkedList1 = new LinkedList<Node<InternalNode<Object>>>();
      LeafNode<InternalNode<Object>> leafNode0 = new LeafNode<InternalNode<Object>>(1527);
      LinkedList<InternalNode<Object>> linkedList2 = new LinkedList<InternalNode<Object>>();
      LeafNode<InternalNode<Object>> leafNode1 = new LeafNode<InternalNode<Object>>(1527, leafNode0, linkedList0, linkedList2);
      linkedList1.add((Node<InternalNode<Object>>) leafNode1);
      InternalNode<InternalNode<Object>> internalNode0 = new InternalNode<InternalNode<Object>>(1527, linkedList0, linkedList1);
      assertEquals(1, internalNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      LeafNode<Object> leafNode1 = new LeafNode<Object>(1508, leafNode0);
      LeafNode<Object> leafNode2 = leafNode1.getPrev();
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode1, leafNode1);
      leafNode1.insert(1508, leafNode0);
      InsertionResult<Object> insertionResult1 = new InsertionResult<Object>(integer0, leafNode2, leafNode1, insertionResult0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult1);
      int int0 = internalNode0.order(1508);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      LeafNode<String> leafNode0 = new LeafNode<String>(1991);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>(integer0, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1991, insertionResult0);
      internalNode0.insert(Integer.MAX_VALUE, "r&m");
      internalNode0.insert((-1), "net.mooctest.LeafNode@0000000001#net.mooctest.LeafNode@0000000001");
      assertEquals(2, internalNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      LeafNode<String> leafNode0 = new LeafNode<String>(1991);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>(integer0, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1991, insertionResult0);
      internalNode0.insert(Integer.MAX_VALUE, "r&m");
      int int0 = internalNode0.getNodeSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      leafNode0.insert(1508, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult0);
      internalNode0.getMaxChildNode();
      assertEquals(2, internalNode0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      LeafNode<String> leafNode0 = new LeafNode<String>(1991);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>(integer0, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1991, insertionResult0);
      leafNode0.insert(2, "{{LKc`E=7nF^");
      Node<String> node0 = internalNode0.getChildNode(0);
      assertEquals(1, node0.getNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LeafNode<String> leafNode0 = new LeafNode<String>(1070);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>((Integer) null, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1070, insertionResult0);
      // Undeclared exception!
      try { 
        internalNode0.order(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.InternalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(2);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(2, insertionResult0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      internalNode0.keys = (List<Integer>) linkedList0;
      // Undeclared exception!
      try { 
        internalNode0.order(1508);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         //verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      LeafNode<String> leafNode0 = new LeafNode<String>(1991);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>(integer0, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1991, insertionResult0);
      leafNode0.t = (-1);
      // Undeclared exception!
      try { 
        internalNode0.insert(Integer.MAX_VALUE, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
          assertEquals("Illegal Capacity: -2",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      InternalNode<Integer> internalNode0 = new InternalNode<Integer>(2051);
      // Undeclared exception!
      try { 
        internalNode0.insert(1991, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InternalNode<Object> internalNode0 = new InternalNode<Object>(3167);
      // Undeclared exception!
      try { 
        internalNode0.getMaxChildNode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Node<String>> linkedList1 = new LinkedList<Node<String>>();
      linkedList0.add((Integer) null);
      InternalNode<String> internalNode0 = new InternalNode<String>(488, linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        internalNode0.getChildNode((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.push(integer0);
      LinkedList<Node<Object>> linkedList1 = new LinkedList<Node<Object>>();
      InternalNode<Object> internalNode0 = new InternalNode<Object>(2839, linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        internalNode0.getChildNode(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
          assertEquals("Index: 1, Size: 0",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InternalNode<String> internalNode0 = new InternalNode<String>(1502);
      // Undeclared exception!
      try { 
        internalNode0.getChildNode((-2551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InsertionResult<InternalNode<Integer>> insertionResult0 = new InsertionResult<InternalNode<Integer>>(0);
      InternalNode<InternalNode<Integer>> internalNode0 = null;
      try {
        internalNode0 = new InternalNode<InternalNode<Integer>>(2, insertionResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.InternalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InsertionResult<InternalNode<String>> insertionResult0 = new InsertionResult<InternalNode<String>>((-1314));
      InternalNode<InternalNode<String>> internalNode0 = null;
      try {
        internalNode0 = new InternalNode<InternalNode<String>>((-1314), insertionResult0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1315
         //
          assertEquals("Illegal Capacity: -1315",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Node<Object>> linkedList0 = new LinkedList<Node<Object>>();
      InternalNode<Object> internalNode0 = null;
      try {
        internalNode0 = new InternalNode<Object>(150, (List<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InternalNode<String> internalNode0 = null;
      try {
        internalNode0 = new InternalNode<String>(0, (List<Integer>) null, (List<Node<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
          assertEquals("Illegal Capacity: -1",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InternalNode<LeafNode<Object>> internalNode0 = null;
      try {
        internalNode0 = new InternalNode<LeafNode<Object>>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
          assertEquals("Illegal Capacity: -1",e.getMessage());
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult0);
      Node<Object> node0 = internalNode0.getChildNode((-2316));
      assertEquals(0, node0.getNodeSize());
  }


  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InternalNode<Integer> internalNode0 = new InternalNode<Integer>(1);
      // Undeclared exception!
      try { 
        internalNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      LeafNode<String> leafNode0 = new LeafNode<String>(1991);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>(integer0, leafNode0, leafNode0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1991, insertionResult0);
      internalNode0.insert(Integer.MAX_VALUE, "");
      // Undeclared exception!
      try { 
        internalNode0.insert(Integer.MAX_VALUE, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("net.mooctest.InternalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult0);
      int int0 = internalNode0.order(1508);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      InternalNode<LeafNode<String>> internalNode0 = new InternalNode<LeafNode<String>>(2);
      InsertionResult<LeafNode<String>> insertionResult0 = new InsertionResult<LeafNode<String>>(integer0, internalNode0, internalNode0);
      InternalNode<LeafNode<String>> internalNode1 = new InternalNode<LeafNode<String>>(2, insertionResult0);
      // Undeclared exception!
      try { 
        internalNode1.order(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LeafNode<String> leafNode0 = new LeafNode<String>(929);
      InsertionResult<String> insertionResult0 = new InsertionResult<String>((-1));
      InsertionResult<String> insertionResult1 = new InsertionResult<String>(integer0, leafNode0, leafNode0, insertionResult0);
      InternalNode<String> internalNode0 = new InternalNode<String>(1, insertionResult1);
      List<Integer> list0 = internalNode0.keys;
      LinkedList<Node<Integer>> linkedList0 = new LinkedList<Node<Integer>>();
      InternalNode<Integer> internalNode1 = new InternalNode<Integer>(1, list0, linkedList0);
      // Undeclared exception!
      try { 
        internalNode1.insert(2, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         //verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InternalNode<String> internalNode0 = new InternalNode<String>(1);
      int int0 = internalNode0.getNodeSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(10);
      LeafNode<Object> leafNode0 = new LeafNode<Object>(10);
      InsertionResult<Object> insertionResult0 = new InsertionResult<Object>(integer0, leafNode0, leafNode0);
      InternalNode<Object> internalNode0 = new InternalNode<Object>(10, insertionResult0);
      Node<Object> node0 = internalNode0.getMaxChildNode();
      assertEquals(0, node0.getNodeSize());
  }
}
